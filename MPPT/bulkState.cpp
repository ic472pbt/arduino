#include "SensorsData.h"
#include "bulkState.h"
#include "Charger.h"

IState* bulkState::Handle(Charger& charger, SensorsData& sensor, unsigned long currentTime) 
{
      IState* newState = this;
      int floatV = charger.floatVoltageTempCorrectedRaw(sensor);
      // detect reverse current
      if (sensor.rawCurrentIn <= 0) {         
          newState = charger.goOff(currentTime);                             
      }
      else if (sensor.rawBatteryV > floatV - charger.powerCompensation){
        charger.pwmController.storeMpptDuty();
        newState = charger.goFloat();              // battery float voltage go to the charger battery float state            
      }                          
      else if (charger.sol_watts < LOW_SOL_WATTS) {              // else if the solar input watts is less than low solar watts
          newState = charger.goOn();                            // it means there is not much power being generated by the solar panel
      }
      else if(currentTime - lastRescanTime > RESCAN_INTERVAL || charger.pwmController.duty > 818){
        lastRescanTime = currentTime;
        newState = charger.goScan(charger.pwmController.duty <= 818);
      }
      else {                                    // this is where we do the Peak Power Tracking ro Maximum Power Point algorithm
          if(charger.mpptReached == 1 || charger.startTracking){
            if(currentTime - lastTrackingTime > 29900 || charger.startTracking){
               // do perturbation
              stepSize = MAX_PWM_DELTA;
              delta = charger.dirrection * stepSize;
              charger.pwmController.initIIR();
              charger.pwmController.incrementDuty(delta);
              lastTrackingTime = currentTime;
              charger.mpptReached = 0; // ! reset MPPT
              rawPowerPrev = sensor.rawPower;   
              voltageInputPrev = charger.rawSolarV;           
              charger.startTracking = false;
            }
          }else{
           if(sensor.rawPower > rawPowerPrev){
                charger.pwmController.incrementDuty(delta);
                rawPowerPrev = sensor.rawPower;
           } else {
                charger.pwmController.incrementDuty(-delta);
                delta /= 2;
                if(delta == 0){                                                // MPP Reached                                         
                  charger.pwmController.smoothDuty();                          // smooth duty value a bit
                  charger.Reverse();                                           // Change the direction for the next tracking.
                  charger.mpptReached = 1;                                     // indicate MPP reached
                } 
              }
          }                    
        }
        return newState;      
    }
